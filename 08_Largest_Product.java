/**
 * Question:
 *  The four adjacent digits in the 1000-digit number that have the greatest product are
 *  9 × 9 × 8 × 9 = 5832.
 *
 *  73167176531330624919225119674426574742355349194934
 *  96983520312774506326239578318016984801869478851843
 *  85861560789112949495459501737958331952853208805511
 *  12540698747158523863050715693290963295227443043557
 *  66896648950445244523161731856403098711121722383113
 *  62229893423380308135336276614282806444486645238749
 *  30358907296290491560440772390713810515859307960866
 *  70172427121883998797908792274921901699720888093776
 *  65727333001053367881220235421809751254540594752243
 *  52584907711670556013604839586446706324415722155397
 *  53697817977846174064955149290862569321978468622482
 *  83972241375657056057490261407972968652414535100474
 *  82166370484403199890008895243450658541227588666881
 *  16427171479924442928230863465674813919123162824586
 *  17866458359124566529476545682848912883142607690042
 *  24219022671055626321111109370544217506941658960408
 *  07198403850962455444362981230987879927244284909188
 *  84580156166097919133875499200524063689912560717606
 *  05886116467109405077541002256983155200055935729725
 *  71636269561882670428252483600823257530420752963450
 *
 *  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
 *  What is the value of this product?
 *
 * Solution
 *  A 1000 digit number is too large for a single data type. Enter as a string and convert to an
 *  ArrayList of Integers. Parse ArrayList i::i+13 to find largest product
 *  By 13 digits, products regulary exceed integer max. Use long to calculate
 *
 */

import java.util.ArrayList;
import java.lang.Integer;

class LargestFinder {

  // # of adjacent digits to multiply together. (Count from 1)
  private final static int TO_COUNT = 13;

  // Thousand digit number
  private final static String THOUSAND_NUM =
      "73167176531330624919225119674426574742355349194934"
          + "96983520312774506326239578318016984801869478851843"
          + "85861560789112949495459501737958331952853208805511"
          + "12540698747158523863050715693290963295227443043557"
          + "66896648950445244523161731856403098711121722383113"
          + "62229893423380308135336276614282806444486645238749"
          + "30358907296290491560440772390713810515859307960866"
          + "70172427121883998797908792274921901699720888093776"
          + "65727333001053367881220235421809751254540594752243"
          + "52584907711670556013604839586446706324415722155397"
          + "53697817977846174064955149290862569321978468622482"
          + "83972241375657056057490261407972968652414535100474"
          + "82166370484403199890008895243450658541227588666881"
          + "16427171479924442928230863465674813919123162824586"
          + "17866458359124566529476545682848912883142607690042"
          + "24219022671055626321111109370544217506941658960408"
          + "07198403850962455444362981230987879927244284909188"
          + "84580156166097919133875499200524063689912560717606"
          + "05886116467109405077541002256983155200055935729725"
          + "71636269561882670428252483600823257530420752963450";

  // Array of Integers from THOUSAND_NUM, built below
  private static ArrayList<Integer> NumberArray = new ArrayList<>();

  /**
   * Converts THOUSAND_NUM string to an array of Integers
   */
  private void BuildNumberArray(){
    for (char c : THOUSAND_NUM.toCharArray()){
      NumberArray.add(Character.getNumericValue(c));
    }
  }

  /**
   * Given a starting index `start`, calculate the product of values from `start`::TO_COUNT
   *
   * @param start starting index.
   * @return product of integers i::i+13
   */
  private long CalcProduct(int start){
    int i;              // Index to pull from
    long product = 1;   // Product to return

    for (i=start; i<start+TO_COUNT; i++) {
      product *= NumberArray.get(i);
    }
    return product;
  }

  long Find(){
    BuildNumberArray();
    int i;  // Iterate through Number Array
    long largestProduct=0;
    for (i=0; i<THOUSAND_NUM.length()-TO_COUNT; i++){
      long nextProduct = CalcProduct(i);
      if (nextProduct>largestProduct) {
        largestProduct = nextProduct;
      }
    }
    return largestProduct;
  }
}

public class Main {
  public static void main(String[] args) {
    LargestFinder finder = new LargestFinder();
    System.out.println(finder.Find());
  }
}
